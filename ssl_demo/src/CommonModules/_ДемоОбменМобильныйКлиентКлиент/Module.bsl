#Область СлужебныеПроцедурыИФункции

// Запускает обмен с главным сервером при старте приложения.
//
Процедура ПриНачалеРаботыСистемы() Экспорт
	ПараметрыПриложения.Вставить("ИдентификаторФоновогоЗадания", Неопределено);
#Если МобильныйКлиент Тогда
	Если _ДемоОбменМобильныйКлиентВызовСервера.ТребуетсяОбменДаннымиСАвтономнымПриложением() Тогда
		Если ОсновнойСерверДоступен() = Истина Тогда
			_ДемоОбменМобильныйКлиентАвтономныйКлиент.НачатьСинхронизацию();
		КонецЕсли;
		ПодключитьОбработчикОжидания("ЗапуститьСинхронизацию", 10);
	КонецЕсли;
#КонецЕсли
КонецПроцедуры 

// Оповещает о завершении обмена между основной и автономной конфигурациями.
//
Процедура ОповеститьОЗавершении() Экспорт
	
	НовыхЗаписей = _ДемоОбменМобильныйКлиентАвтономныйВызовСервера.ПринятоОтправленоНовыхЗаписей();
	Если НовыхЗаписей.Принято = 0 И НовыхЗаписей.Отправлено = 0 Тогда
		Возврат;
	КонецЕсли;

	ОбновитьИнтерфейс();
	ТекстОповещения = НСтр("ru = 'Принято объектов: %1 Отправлено объектов: %2'");
	ПоказатьОповещениеПользователя(НСтр("ru = 'Выполнена синхронизация'"), , 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОповещения, НовыхЗаписей.Принято, НовыхЗаписей.Отправлено));

КонецПроцедуры

// Возвращает идентификатор фонового задания синхронизации данных с автономным узлом.
//
// Возвращаемое значение:
//  Строка
//
Функция ИдентификаторФоновогоЗадания() Экспорт

	Возврат ПараметрыПриложения.Получить("ИдентификаторФоновогоЗадания");
	
КонецФункции

#КонецОбласти