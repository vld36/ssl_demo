#Область СлужебныеПроцедурыИФункции

// Формирует пакет обмена, который будет отправлен узлу УзелОбмена. 
//
// Параметры:
//  УзелОбмена - ПланОбменаСсылка - узел плана обмена "мобильные", с которым осуществляется обмен.
//
// Возвращаемое значение:
//  ХранилищеЗначения - сформированный пакет обмена.
//
Функция СформироватьПакетОбмена(УзелОбмена) Экспорт
	
	ИмяФайлаXML = СформироватьXML(УзелОбмена);
	Пакет = Новый ДвоичныеДанные(ИмяФайлаXML);
	ХранилищеПакет = Новый ХранилищеЗначения(Пакет);
	Возврат ХранилищеПакет;
	
КонецФункции

// Вносит в информационную базу данные, которые присланы из узла УзелОбмена. 
//
// Параметры:
//  УзелОбмена - ПланОбменаСсылка - узел плана обмена "мобильные", с которым осуществляется обмен.
//  ДанныеОбмена - ХранилищеЗначения - пакет обмена, полученный из узла УзелОбмена.
//
Процедура ПринятьПакетОбмена(УзелОбмена, ДанныеОбмена) Экспорт
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанные = ДанныеОбмена.Получить(); // ДвоичныеДанные
	ДвоичныеДанные.Записать(ИмяФайла);
	
	УстановитьПривилегированныйРежим(Истина);
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяФайла,,,"UTF-8");
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
	ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель,ЧтениеСообщения.НомерПринятого);
	
	НачатьТранзакцию();
	Попытка
		Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
			Данные = ПрочитатьДанные(ЧтениеXML);
			Если Данные <> Неопределено Тогда
				Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
				Данные.ОбменДанными.Загрузка = Истина;
				Данные.Записать();
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
	ЧтениеСообщения.ЗакончитьЧтение();
	ЧтениеXML.Закрыть();
	
	УдалитьФайлы(ИмяФайла);
	
КонецПроцедуры

// Записывает данные в формат XML.
//
// Параметры:
//  ЗаписьXML - ЗаписьXML
//  Данные - Произвольный - данные, подлежащие записи в формат XML.
//
Процедура ЗаписатьДанные(ЗаписьXML, Данные) Экспорт
	
	// В данном случае, нет данных, которые требуют нестандартной обработки
	// Записываем данные с помощью стандартного метода
	
	Если ТипЗнч(Данные) = Тип("СправочникОбъект.ВариантыОтчетов") Тогда
		ВариантыОтчетовВXML(ЗаписьXML, Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("СправочникОбъект.Пользователи") Тогда
		ПользователиВXML(ЗаписьXML, Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.СнимкиОтчетов") Тогда
		СнимкиОтчетовВXML(ЗаписьXML, Данные);
	КонецЕсли;
	
	#Если МобильныйАвтономныйСервер Тогда
		Константы._ДемоОтправленоЗаписей.Установить(Константы._ДемоОтправленоЗаписей.Получить() + 1);
	#КонецЕсли
	
КонецПроцедуры

// Читает данные из формата XML.
//
// Параметры:
//  ЧтениеXML - ЧтениеXML
//
// Возвращаемое значение:
//  Произвольный - прочитанное значение.
//
Функция ПрочитатьДанные(ЧтениеXML)
	
	Если ЧтениеXML.Имя = "CatalogObject.ВариантыОтчетов" Тогда
		Данные = ВариантыОтчетовИзXML(ЧтениеXML);
	ИначеЕсли ЧтениеXML.Имя = "CatalogObject.Пользователи" Тогда
		Данные = ПользователиИзXML(ЧтениеXML);
	ИначеЕсли ЧтениеXML.Имя = "InformationRegisterRecordSet.СнимкиОтчетов" Тогда
		Данные = СнимкиОтчетовИзXML(ЧтениеXML);
	КонецЕсли;
	
#Если НЕ МобильныйАвтономныйСервер Тогда
#Иначе
	Константы._ДемоПринятоЗаписей.Установить(Константы._ДемоПринятоЗаписей.Получить() + 1);
#КонецЕсли
	
	Возврат Данные;
	
КонецФункции

// Регистрирует изменения, для всех данных, входящих в состав плана обмена.
//
// Параметры:
//  УзелОбмена - узел плана обмена, для которого регистрируются изменения.
//
Процедура ЗарегистрироватьИзмененияДанных(УзелОбмена) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СнимкиОтчетов.Вариант КАК Вариант
	|ИЗ
	|	РегистрСведений.СнимкиОтчетов КАК СнимкиОтчетов
	|ГДЕ
	|	СнимкиОтчетов.Вариант ССЫЛКА Справочник.ВариантыОтчетов";
	
	СоставПланаОбмена = УзелОбмена.Метаданные().Состав;
	Для Каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл
		
		Если ЭлементСоставаПланаОбмена.Метаданные = Метаданные.Справочники.ВариантыОтчетов Тогда
			// @skip-check query-in-loop - Однократная обработка данных
			МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Вариант");
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, МассивСсылок);
		Иначе
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена,ЭлементСоставаПланаОбмена.Метаданные);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьXML(УзелОбмена)
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаписьXML = Новый ЗаписьXML;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьXML.ОткрытьФайл(ИмяФайла, "UTF-8");
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8",  "http://v8.1c.ru/data");
	
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбмена, ЗаписьСообщения.НомерСообщения);
	Пока ВыборкаИзменений.Следующий() Цикл
		Данные = ВыборкаИзменений.Получить();
		ЗаписатьДанные(ЗаписьXML, Данные);
	КонецЦикла;
	
	ЗаписьСообщения.ЗакончитьЗапись();
	ЗаписьXML.Закрыть();
	
	Возврат ИмяФайла;
	
КонецФункции

#Область ВыгрузкаДанных

Процедура ВариантыОтчетовВXML(ЗаписьXML, Данные)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.ВариантыОтчетов");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Ссылка");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Ссылка.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Наименование");
	ЗаписьXML.ЗаписатьТекст(Данные.Наименование);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура ПользователиВXML(ЗаписьXML, Данные)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("CatalogObject.Пользователи");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Ссылка");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.Ссылка.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Наименование");
	ЗаписьXML.ЗаписатьТекст(Данные.Наименование);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ИдентификаторПользователяИБ");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные.ИдентификаторПользователяИБ));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Процедура СнимкиОтчетовВXML(ЗаписьXML, Данные)
	
	Если Данные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("InformationRegisterRecordSet.СнимкиОтчетов");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Пользователь");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные[0].Пользователь.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Отчет");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные[0].Отчет.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ОтчетТипЗначения");
	Если ТипЗнч(Данные[0].Отчет) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		ЗаписьXML.ЗаписатьТекст("ИдентификаторыОбъектовМетаданных");
	ИначеЕсли ТипЗнч(Данные[0].Отчет) = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
		ЗаписьXML.ЗаписатьТекст("ИдентификаторыОбъектовРасширений");
	Иначе
		ЗаписьXML.ЗаписатьТекст("ДополнительныеОтчетыИОбработки");
	КонецЕсли;
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьНачалоЭлемента("ВариантОтчета");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные[0].Вариант.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ВариантТипЗначения");
	ЗаписьXML.ЗаписатьТекст(?(ТипЗнч(Данные[0].Вариант) = Тип("СправочникСсылка.ВариантыОтчетов"),
							"ВариантыОтчетов",
							""));
	ЗаписьXML.ЗаписатьКонецЭлемента();

	ЗаписьXML.ЗаписатьНачалоЭлемента("ХешПользовательскойНастройки");
	ЗаписьXML.ЗаписатьТекст(Данные[0].ХешПользовательскойНастройки);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("РезультатОтчета");
	РезультатОтчета = СериализаторXDTO.ЗаписатьXDTO(Данные[0].РезультатОтчета);
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, РезультатОтчета, "ValueStorage", "http://v8.1c.ru/8.1/data/core", ,
		НазначениеТипаXML.Явное);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ДатаАктуальности");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные[0].ДатаАктуальности));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ДатаПоследнегоПросмотра");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные[0].ДатаПоследнегоПросмотра));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ОшибкаОбновленияОтчета");
	ЗаписьXML.ЗаписатьТекст(Строка(Данные[0].ОшибкаОбновленияОтчета));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанных

Функция ВариантыОтчетовИзXML(ЧтениеXML)
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ДанныеСсылка = Справочники.ВариантыОтчетов.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Ссылка));
	Данные = ДанныеСсылка.ПолучитьОбъект();
	
	Если Данные = Неопределено Тогда
		Данные = Справочники.ВариантыОтчетов.СоздатьЭлемент();
		Данные.УстановитьСсылкуНового(ДанныеСсылка);
	Иначе
		Данные = ДанныеСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Данные, ОбъектXDTO);
	
	Возврат Данные;
	
КонецФункции

Функция ПользователиИзXML(ЧтениеXML)
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ДанныеСсылка = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Ссылка));
	Данные = ДанныеСсылка.ПолучитьОбъект();
	
	Если Данные = Неопределено Тогда
		Данные = Справочники.Пользователи.СоздатьЭлемент();
		Данные.УстановитьСсылкуНового(ДанныеСсылка);
	Иначе
		Данные = ДанныеСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Данные, ОбъектXDTO);
	Данные.ИдентификаторПользователяИБ = Новый УникальныйИдентификатор(ОбъектXDTO.ИдентификаторПользователяИБ);
	
	Возврат Данные;
	
КонецФункции

Функция СнимкиОтчетовИзXML(ЧтениеXML)
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);

	Пользователь = Справочники.Пользователи.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.Пользователь));
	Если ОбъектXDTO.ОтчетТипЗначения = "ИдентификаторыОбъектовМетаданных" Тогда
		Отчет = Справочники.ИдентификаторыОбъектовМетаданных.ПолучитьСсылку(
			Новый УникальныйИдентификатор(ОбъектXDTO.Отчет));
	ИначеЕсли ОбъектXDTO.ОтчетТипЗначения = "ИдентификаторыОбъектовРасширений" Тогда
		Отчет = Справочники.ИдентификаторыОбъектовРасширений.ПолучитьСсылку(
			Новый УникальныйИдентификатор(ОбъектXDTO.Отчет));
	Иначе
		Отчет = Справочники.ДополнительныеОтчетыИОбработки.ПолучитьСсылку(
			Новый УникальныйИдентификатор(ОбъектXDTO.Отчет));
	КонецЕсли;
	Если ОбъектXDTO.ВариантТипЗначения = "ВариантыОтчетов" Тогда
		Вариант = Справочники.ВариантыОтчетов.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектXDTO.ВариантОтчета));
	Иначе
		Вариант = Неопределено;
	КонецЕсли;

	МенеджерЗаписи = РегистрыСведений.СнимкиОтчетов.СоздатьМенеджерЗаписи();

	МенеджерЗаписи.Пользователь = Пользователь;
	МенеджерЗаписи.Отчет = Отчет;
	МенеджерЗаписи.Вариант = Вариант;
	МенеджерЗаписи.ХешПользовательскойНастройки = ОбъектXDTO.ХешПользовательскойНастройки;

	МенеджерЗаписи.РезультатОтчета = ОбъектXDTO.РезультатОтчета.ValueStorage;
	МенеджерЗаписи.ДатаАктуальности = Дата(ОбъектXDTO.ДатаАктуальности);
	МенеджерЗаписи.ДатаПоследнегоПросмотра = Дата(ОбъектXDTO.ДатаПоследнегоПросмотра);

	МенеджерЗаписи.ОшибкаОбновленияОтчета = Булево(ОбъектXDTO.ОшибкаОбновленияОтчета);

	Попытка
		МенеджерЗаписи.Записать();
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось записать снимок отчета %1 по причине: 
				 |%2'"), ?(ЗначениеЗаполнено(Вариант), Вариант, Отчет), ОбработкаОшибок.ПодробноеПредставлениеОшибки(
			ИнформацияОбОшибке()));
#Если МобильныйАвтономныйСервер Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
#Иначе
		ЗаписьЖурналаРегистрации(НСтр("ru='Загрузка снимка отчета из XML'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, Метаданные.РегистрыСведений.СнимкиОтчетов, , ТекстСообщения);
#КонецЕсли
	КонецПопытки;

	Возврат Неопределено;
	
КонецФункции

Процедура ЗарегистрироватьИзмененияДляАвтономногоРежимаПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Источник) = Тип("СправочникОбъект.ВариантыОтчетов") Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Вариант", Источник.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СнимкиОтчетов.Вариант КАК Вариант
		|ИЗ
		|	РегистрСведений.СнимкиОтчетов КАК СнимкиОтчетов
		|ГДЕ
		|	СнимкиОтчетов.Вариант = &Вариант";
		Если Запрос.Выполнить().Пустой() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УзлыДляРегистрации = УзлыДляРегистрации();
	
	ЗарегистрироватьИзмененияДляУзловОбмена(УзлыДляРегистрации, Источник);
	
КонецПроцедуры

// Возвращает массив узлов плана обмена с учетом исключаемых.
//
// Возвращаемое значение:
//  Массив из ПланОбменаСсылка._ДемоМобильныйКлиент
//
Функция УзлыДляРегистрации()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	_ДемоМобильныйКлиент.Ссылка
	|ИЗ
	|	ПланОбмена._ДемоМобильныйКлиент КАК _ДемоМобильныйКлиент
	|ГДЕ
	|	НЕ _ДемоМобильныйКлиент.ПометкаУдаления
	|	И НЕ _ДемоМобильныйКлиент.ЭтотУзел");
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

// Регистрирует объекты в узлах обмена мобильного приложения.
//
// Параметры:
//  МассивУзлов - Массив из ПланОбменаСсылка._ДемоМобильныйКлиент
//  Объект - СправочникОбъект, РегистрСведенийНаборЗаписей - объект, для которого регистрируются изменения.
//
Процедура ЗарегистрироватьИзмененияДляУзловОбмена(МассивУзлов, Объект)
	
	Если МассивУзлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если ТипЗнч(Объект) = Тип("Массив") Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Объект);
	Иначе
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияДляАвтономногоРежимаРегистрыПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	УзлыДляРегистрации = УзлыДляРегистрации();
	
	ЗарегистрироватьИзмененияДляУзловОбменаРегистры(УзлыДляРегистрации, Источник);
	
	Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.СнимкиОтчетов") Тогда
		МассивСсылок = Новый Массив;
		Для Каждого Запись Из Источник Цикл
			МассивСсылок.Добавить(Запись.Вариант);
			МассивСсылок.Добавить(Запись.Пользователь);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСсылок.Количество() > 0 Тогда
		ЗарегистрироватьИзмененияДляУзловОбмена(УзлыДляРегистрации, МассивСсылок);
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует объекты в узлах обмена мобильного приложения.
//
// Параметры:
//  МассивУзлов - Массив из ПланОбменаСсылка._ДемоМобильныйКлиент
//  НаборЗаписей - РегистрСведенийНаборЗаписей - объект, для которого регистрируются изменения.
//
Процедура ЗарегистрироватьИзмененияДляУзловОбменаРегистры(МассивУзлов, НаборЗаписей)
	
	Если МассивУзлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, НаборЗаписей);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
