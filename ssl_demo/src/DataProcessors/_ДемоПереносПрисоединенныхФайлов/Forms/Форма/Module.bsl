///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВладельцыФайлов = Новый Массив;
	
	// АПК:278-выкл - Вызов служебного программного интерфейса для целей тестирования.
	СуффиксСправочника = РаботаСФайламиСлужебный.СуффиксСправочникаПрисоединенныеФайлы();
	// АПК:278-вкл
	ДлинаПрефикса      = СтрДлина(СуффиксСправочника);
	
	Для Каждого СправочникСФайлами Из Метаданные.Справочники Цикл
		Если СтрЗаканчиваетсяНа(СправочникСФайлами.Имя, СуффиксСправочника) Тогда
			КраткоеИмяВладельцаФайлов = Лев(СправочникСФайлами.Имя, СтрДлина(СправочникСФайлами.Имя) - ДлинаПрефикса);
			Если Метаданные.Справочники.Найти(КраткоеИмяВладельцаФайлов) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ИмяТипа = "СправочникСсылка." + КраткоеИмяВладельцаФайлов;
			Если Метаданные.Справочники.Файлы.Реквизиты.ВладелецФайла.Тип.СодержитТип(Тип(ИмяТипа)) Тогда
				ВладельцыФайлов.Добавить("Справочник." + Лев(СправочникСФайлами.Имя, СтрДлина(СправочникСФайлами.Имя) - ДлинаПрефикса));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяОМ Из ВладельцыФайлов Цикл
		ВладелецФайлов = ОбщегоНазначения.ОбъектМетаданныхПоПолномуИмени(ИмяОМ);
		Элементы.ДокументИлиСправочник.СписокВыбора.Добавить(ВладелецФайлов.ПолноеИмя(), ВладелецФайлов.Представление());
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДокументИлиСправочникПриИзменении(Элемент)
	
	Элементы.Источник.СписокВыбора.Очистить();
	Элементы.Приемник.СписокВыбора.Очистить();
	
	ИменаСправочниковХраненияФайлов = ИменаСправочниковХраненияФайлов(ДокументИлиСправочник);
	Для Каждого ИмяСправочникаХранения Из ИменаСправочниковХраненияФайлов Цикл
		Элементы.Источник.СписокВыбора.Добавить(ИмяСправочникаХранения.Значение, ИмяСправочникаХранения.Представление);
		Элементы.Приемник.СписокВыбора.Добавить(ИмяСправочникаХранения.Значение, ИмяСправочникаХранения.Представление);
	КонецЦикла;
	
КонецПроцедуры     

&НаКлиенте
Процедура ИсточникПриИзменении(Элемент)    
	
	ЗаполнитьТаблицуПрисоединенныхФайлов();
	УстановитьОсновнуюТаблицуИсточника();
	
КонецПроцедуры

&НаКлиенте
Процедура ВладельцыПрисоединенныхФайловПриАктивизацииЯчейки(Элемент)
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ПриемникПриИзменении(Элемент)
	УстановитьОсновнуюТаблицуПриемника();
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиФайлы(Команда)
	
	Если ПустаяСтрока(ДокументИлиСправочник) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Укажите документ или справочник с присоединенными файлами.'"),, "ДокументИлиСправочник");
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Источник) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Укажите таблицу-источник с файлами.'"),, "Источник");
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Приемник) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Укажите таблицу-приемник файлов.'"),, "Приемник");
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ВладельцыПрисоединенныхФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выберите владельца присоединенных файлов.'"),, "ВладельцыПрисоединенныхФайлов");
		Возврат;
	КонецЕсли;
	
	Результат = ПеренестиФайлыСервер(ТекущиеДанные.Ссылка);
	Если Результат > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файлы успешно перенесены (%1).'"), Результат);
	Иначе
		ТекстСообщения = НСтр("ru = 'Файлы не были перенесены. Нажмите ""Создать файлы для переноса"" и повторите перенос.'");
	КонецЕсли;
	ПоказатьПредупреждение(, ТекстСообщения);
	Элементы.ФайлыИсточника.Обновить();
	Элементы.ФайлыПриемника.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлыДляПереноса(Команда)
	
	Если ПустаяСтрока(ДокументИлиСправочник) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Укажите объект метаданных с файлами.'"),, "ДокументИлиСправочник");
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Источник) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Укажите таблицу-источник с файлами.'"),, "Источник");
		Возврат;
	КонецЕсли;
	
	Результат = СоздатьФайлыДляПереносаНаСервере();
	ЗаполнитьТаблицуПрисоединенныхФайлов();
	
	Если Результат > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файлы успешно созданы (%1).'"), Результат);
	Иначе
		ТекстСообщения = НСтр("ru = 'Файлы для переноса не были созданы.'");
	КонецЕсли;
	ПоказатьПредупреждение(, ТекстСообщения);
	
	Элементы.ФайлыИсточника.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТаблицуПрисоединенныхФайлов()
	
	ВладельцыПрисоединенныхФайлов.Очистить();
	ВладельцыПрисоединенныхФайловЗначение = РеквизитФормыВЗначение("ВладельцыПрисоединенныхФайлов");
	// АПК:278-выкл - Вызов служебного программного интерфейса для целей тестирования.
	ВладельцыФайлов = РаботаСФайламиСлужебный.СсылкиНаОбъектыСФайлами(ДокументИлиСправочник, Источник);
	// АПК:278-вкл
	Для Каждого ВладелецФайлов Из ВладельцыФайлов Цикл
		НоваяСтрока = ВладельцыПрисоединенныхФайловЗначение.Добавить();
		НоваяСтрока.Ссылка = ВладелецФайлов;
	КонецЦикла;
	ЗначениеВРеквизитФормы(ВладельцыПрисоединенныхФайловЗначение, "ВладельцыПрисоединенныхФайлов");
	
КонецПроцедуры

&НаСервере
Функция ПеренестиФайлыСервер(ВладелецФайлов)
	
	ПеренесенныеФайлы = РаботаСФайлами.ПеренестиФайлыМеждуСправочникамиХранения(ВладелецФайлов, Источник, Приемник);
	
	Возврат ПеренесенныеФайлы.Количество();
	
КонецФункции

&НаСервере
Функция СоздатьФайлыДляПереносаНаСервере()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПрисоединенныеФайлы.Автор КАК Автор,
		|	ПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайлов,
		|	ПрисоединенныеФайлы.Расширение КАК РасширениеБезТочки,
		|	ПрисоединенныеФайлы.Наименование КАК ИмяБезРасширения,
		|	ПрисоединенныеФайлы.ДатаМодификацииУниверсальная КАК ВремяИзмененияУниверсальное,
		|	ПрисоединенныеФайлы.Ссылка КАК Ссылка
		|ИЗ
		|	&ИмяТаблицы КАК ПрисоединенныеФайлы";
	// АПК:278-выкл - Вызов служебного программного интерфейса для целей тестирования.
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", 
		ДокументИлиСправочник + РаботаСФайламиСлужебный.СуффиксСправочникаПрисоединенныеФайлы());
	// АПК:278-вкл
	Запрос = Новый Запрос(ТекстЗапроса);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Результат = 0;
	Пока Выборка.Следующий() Цикл
		
		ФайлИсточник = Выборка.Ссылка; // СправочникСсылка
		
		НачатьТранзакцию();
		Попытка
			
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(ФайлИсточник);
			
			ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
			ПараметрыФайла.Автор = ДанныеФайла.Автор;
			ПараметрыФайла.ВладелецФайлов = Выборка.ВладелецФайлов;
			ПараметрыФайла.ИмяБезРасширения = ДанныеФайла.Наименование;
			ПараметрыФайла.РасширениеБезТочки = ДанныеФайла.Расширение;
			ИмяИсточника = Метаданные.НайтиПоПолномуИмени(Источник).Имя;
			НоваяСсылкаНаФайл = РаботаСФайлами.НоваяСсылкаНаФайл(Выборка.ВладелецФайлов, ИмяИсточника);
			РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,,,НоваяСсылкаНаФайл);
	
			Результат = Результат + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИменаСправочниковХраненияФайлов(ДокументИлиСправочник)
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ДокументИлиСправочник);
	ПустаяСсылка = МенеджерОбъекта.ПустаяСсылка();
	// АПК:278-выкл - Вызов служебного программного интерфейса для целей тестирования.
	ИменаСправочниковХраненияФайлов = РаботаСФайламиСлужебный.ИменаСправочниковХраненияФайлов(ПустаяСсылка, Истина);
	// АПК:278-вкл
	Результат = Новый СписокЗначений;
	Для Каждого ИмяСправочникаХраненияФайлов Из ИменаСправочниковХраненияФайлов Цикл
		СправочникХранения = Метаданные.Справочники[ИмяСправочникаХраненияФайлов.Ключ];
		Результат.Добавить(СправочникХранения.ПолноеИмя(), СправочникХранения.Представление());
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьОтбор()
	ТекущиеДанные = Элементы.ВладельцыПрисоединенныхФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ВладелецФайлов = Неопределено;
	Иначе
		ВладелецФайлов = ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ФайлыИсточника.Отбор, "ВладелецФайла", ВладелецФайлов, ВидСравненияКомпоновкиДанных.Равно);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ФайлыПриемника.Отбор, "ВладелецФайла", ВладелецФайлов, ВидСравненияКомпоновкиДанных.Равно);
КонецПроцедуры

&НаСервере
Процедура УстановитьОсновнуюТаблицуИсточника()
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ОсновнаяТаблица              = Источник;
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.ФайлыИсточника, СвойстваСписка);
КонецПроцедуры

&НаСервере
Процедура УстановитьОсновнуюТаблицуПриемника()
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ОсновнаяТаблица              = Приемник;
	СвойстваСписка.ДинамическоеСчитываниеДанных = Истина;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.ФайлыПриемника, СвойстваСписка);
КонецПроцедуры

#КонецОбласти
